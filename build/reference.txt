************************************
*     S2 Reference                 *
************************************

*** ARITHMETIC ***
+   (a b--n)      n: a+b - addition
-   (a b--n)      n: a-b - subtraction
*   (a b--n)      n: a*b - multiplication
/   (a b--q)      q: a/b - division
&   (a b--q r)    q: DIV(a,b), r: MODULO(a,b) - /MOD
x%  (a b--m)      m: MODULO(a,b)


*** FLOATING POINT ***
fI     (a--b)     b: a converted to a float
fO     (a--b)     b: a converted to an integer
f+   (a b--n)     n: a+b - addition
f-   (a b--n)     n: a-b - subtraction
f*   (a b--n)     n: a*b - multiplication
f/   (a b--q)     q: a/b - division


*** BIT MANIPULATION ***
b&  (a b--n)      n: a AND b
b|  (a b--n)      n: a OR  b
b^  (a b--n)      n: a XOR b
b~  (a--b)        b: NOT a (ones-complement, e.g - 101011 => 010100)


*** STACK ***
#  (a--a a)       Duplicate TOS                    (DUP)
\  (a b--a)       Drop TOS                         (DROP)
$  (a b--b a)     Swap top 2 stack items           (SWAP)
%  (a b--a b a)   Push 2nd                         (OVER)
_  (a--b)         b: -a                            (Negate)


*** MEMORY ***
c@    (a--n)      Fetch BYTE n from address a
@     (a--n)      Fetch CELL n from address a
c!    (n a--)     Store BYTE n to address a
!     (n a--)     Store CELL n to address a


*** REGISTERS ***
        NOTES: 1) A register name is any printable character, including <space>
               2) Punctuation characters can also be used registers
rX    (--n)       n: value of register X
sX    (n--)       n: value to store in register X
iX    (--)        increment register X
dX    (--)        decrement register X


*** WORDS/FUNCTIONS ***
        NOTES: 1) A function name is a single UPPERCASE character
:     (--)        Define function. Copy chars to (HERE++) until closing ';'.
X     (?--?)      Call function X
^     (--)        Early return from function
;     (--)        Function definition end, return
        NOTES: 1) Returning while inside of a loop is not supported; break out of the loop first.
               2) Use 'xW' to break out of a FOR or WHILE loop.
               2) Use 'xL' to break out of a FOR or WHILE loop.


*** INPUT/OUTPUT ***
.      (n--)      n: Number to output as a decimal
,      (c--)      c: Character to output
"      (--)       Output characters until the next '"'.
0..9   (--n)      Scan DECIMAL number. For multiple numbers, separate them by space (47 33).
        NOTES: 1) To enter a negative number, use "negate" (eg - 490_).
               2) If "e" immediately follows the number (eg - 355e), then convert it to a float.
'x     (--n)      n: the ASCII value of x
`XXX`  (--)       Executes XXX as a shell command (ie - system(xxx))
xR     (a--n)     ReadLine: a: byte address, n: number of chars read
?      (--c)      c: next character from STDIN (0 if EOF)


*** CONDITIONS/LOOPS/FLOW CONTROL ***
<     (a b--a f)  f: (a < b) ? -1 : 0;
=     (a b--a f)  f: (a = b) ? -1 : 0;
>     (a b--a f)  f: (a > b) ? -1 : 0;
~     (n -- f)    f: (a = 0) ? -1 : 0; (Logical NOT)
xU    (--)        UNLOOP: Unwind FOR/WHILE stack, used to return from a function when in a loop 
[     (F T--)     FOR: start a For/Next loop.
xI    (--n)       n: the index of the current FOR loop
xF    (--)        exit FOR loop: unwind FOR loop stack, continue after next ']'
            NOTE: you can return from the function when in a FOR loop using (xUxUxU^)
]     (--)        NEXT: increment index (I) and restart loop if (rI <= T)
{     (f--f)      BEGIN: if (f == 0) skip to matching '}'
}     (f--f?)     WHILE: if (f != 0) jump to matching '{', else drop f and continue
xW    (--)        exit WHILE loop: unwind WHILE loop stack, continue after next '}'
            NOTE: you can return from the function when in a WHILE loop using (xU^)
(     (f--)       IF: if (f != 0), continue into '()', continue after next ')'


*** FILE ***
xO    (n--f)      OPEN  - n: 0=>READ, else WRITE, f: file handle
xC    (f--)       CLOSE - f: file handle
xR    (f--c)      FREAD - f: file handle, n: char read (0 if EOF)
xW    (c f--)     WRITE - f: file handle, c: char to write


*** OTHER ***
xQ    (--)        Exit S2
